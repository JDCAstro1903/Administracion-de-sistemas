# Definición de variables globales
$script:Config = @{
    InterfaceAlias = $null
    IPAddress = $null
    Gateway = $null
    Subnet = $null
    DNSServer = $null
    Domain = "reprobados.com"
    ScopeStart = $null
    ScopeEnd = $null
}

# Función para mostrar mensajes con colores
function Write-LogMessage {
    param(
        [Parameter(Mandatory=$true)]
        [string]$Message,
        [ValidateSet('Info', 'Success', 'Error', 'Warning')]
        [string]$Type = 'Info'
    )
    
    $colors = @{
        'Info' = 'Cyan'
        'Success' = 'Green'
        'Error' = 'Red'
        'Warning' = 'Yellow'
    }
    
    Write-Host "[$Type] $Message" -ForegroundColor $colors[$Type]
}

# Función mejorada para validar IP
function Test-IPAddress {
    param (
        [Parameter(Mandatory=$true)]
        [string]$IPAddress
    )
    
    try {
        $null = [IPAddress]$IPAddress
        return $true
    }
    catch {
        return $false
    }
}

# Función para solicitar datos con validación
function Get-ValidatedInput {
    param(
        [string]$Prompt,
        [string]$ValidationType,
        [switch]$Required
    )
    
    do {
        $input = Read-Host $Prompt
        if ([string]::IsNullOrWhiteSpace($input) -and $Required) {
            Write-LogMessage "El valor no puede estar vacío" -Type Error
            continue
        }
        
        switch ($ValidationType) {
            "IP" {
                if (Test-IPAddress $input) { return $input }
                Write-LogMessage "IP inválida. Formato esperado: xxx.xxx.xxx.xxx" -Type Error
            }
            "Subnet" {
                if (Validar-Subnet $input) { return $input }
                Write-LogMessage "Máscara de subred inválida" -Type Error
            }
            default { return $input }
        }
    } while ($true)
}

# Función mejorada para configurar DNS
function Set-DNSConfiguration {
    try {
        Write-LogMessage "Iniciando configuración DNS..." -Type Info
        
        # Verificar si el servicio DNS está instalado
        if (-not (Get-WindowsFeature -Name DNS).Installed) {
            Install-WindowsFeature -Name DNS -IncludeManagementTools
        }
        
        $Config.InterfaceAlias = Get-ValidatedInput "Nombre de la interfaz de red" -Required
        $Config.IPAddress = Get-ValidatedInput "Dirección IP para el servidor DNS" -ValidationType IP -Required
        
        # Configurar IP
        New-NetIPAddress -InterfaceAlias $Config.InterfaceAlias -IPAddress $Config.IPAddress -PrefixLength 24 -ErrorAction Stop
        
        # Configurar zona DNS
        Add-DnsServerPrimaryZone -Name $Config.Domain -ZoneFile "$($Config.Domain).dns" -DynamicUpdate None
        
        # Agregar registros
        Add-DnsServerResourceRecordA -ZoneName $Config.Domain -Name "@" -IPv4Address $Config.IPAddress
        Add-DnsServerResourceRecordA -ZoneName $Config.Domain -Name "www" -IPv4Address $Config.IPAddress
        
        # Configurar firewall y DNS
        New-NetFirewallRule -DisplayName "Allow DNS" -Direction Inbound -Protocol UDP -LocalPort 53 -Action Allow
        Set-DnsClientServerAddress -InterfaceAlias $Config.InterfaceAlias -ServerAddresses $Config.IPAddress
        
        Restart-Service -Name DNS -Force
        Write-LogMessage "Configuración DNS completada exitosamente" -Type Success
    }
    catch {
        Write-LogMessage "Error en la configuración DNS: $_" -Type Error
        return $false
    }
    return $true
}

# Función mejorada para configurar DHCP
function Set-DHCPConfiguration {
    try {
        Write-LogMessage "Iniciando configuración DHCP..." -Type Info
        
        # Verificar si el servicio DHCP está instalado
        if (-not (Get-WindowsFeature -Name 'DHCP').Installed) {
            Install-WindowsFeature -Name 'DHCP' -IncludeManagementTools
        }
        
        # Recopilar información
        $Config.Gateway = Get-ValidatedInput "Puerta de enlace predeterminada" -ValidationType IP -Required
        $Config.Subnet = Get-ValidatedInput "Máscara de subred" -ValidationType Subnet -Required
        $Config.ScopeStart = Get-ValidatedInput "Inicio del rango de direcciones" -ValidationType IP -Required
        $Config.ScopeEnd = Get-ValidatedInput "Final del rango de direcciones" -ValidationType IP -Required
        
        # Configurar DHCP
        Add-DhcpServerV4Scope -Name "Red_Principal" `
                             -StartRange $Config.ScopeStart `
                             -EndRange $Config.ScopeEnd `
                             -SubnetMask $Config.Subnet `
                             -State Active
        
        Set-DhcpServerV4OptionValue -ScopeId $Config.ScopeStart `
                                   -Router $Config.Gateway `
                                   -DnsServer $Config.IPAddress
        
        Restart-Service DHCPServer -Force
        Write-LogMessage "Configuración DHCP completada exitosamente" -Type Success
    }
    catch {
        Write-LogMessage "Error en la configuración DHCP: $_" -Type Error
        return $false
    }
    return $true
}

# Función principal mejorada
function Show-MainMenu {
    Write-LogMessage "Script de Configuración de Servicios de Red" -Type Info
    
    do {
        Write-Host "`n====== MENÚ PRINCIPAL ======" -ForegroundColor Cyan
        Write-Host "1. Configurar DNS"
        Write-Host "2. Configurar DHCP"
        Write-Host "3. Verificar Servicios"
        Write-Host "4. Salir"
        Write-Host "==========================" -ForegroundColor Cyan
        
        $opcion = Read-Host "`nSeleccione una opción"
        
        switch ($opcion) {
            "1" { Set-DNSConfiguration }
            "2" { Set-DHCPConfiguration }
            "3" { 
                Get-Service -Name DNS, DHCPServer | 
                Format-Table Name, Status, DisplayName -AutoSize
            }
            "4" { 
                Write-LogMessage "Saliendo del script..." -Type Success
                return 
            }
            default { Write-LogMessage "Opción no válida" -Type Warning }
        }
    } while ($true)
}


# Iniciar el script
Show-MainMenu
